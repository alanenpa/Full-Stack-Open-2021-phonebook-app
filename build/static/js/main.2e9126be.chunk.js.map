{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newEntry","post","id","put","delete","Filter","value","handler","onChange","PersonForm","props","onSubmit","newName","nameHandler","newNumber","numberHandler","type","ContactList","selectFrom","handleDeletion","map","person","name","number","onClick","Notification","message","error","className","App","useState","persons","setPersons","setNewName","setNewNumber","showAll","setShowAll","filter","setFilter","setMessage","setError","useEffect","personService","initialContacts","entriesToShow","toLowerCase","includes","event","target","length","preventDefault","some","window","confirm","find","p","updated","catch","setTimeout","returnedPerson","concat","parseInt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e9126be.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newEntry => {\r\n  const request = axios.post(baseUrl, newEntry)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newEntry) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newEntry)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { getAll,create,update,remove }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Filter = ({ value, handler }) => (\n  <div>\n    filter with name or number: <input value={value} onChange={handler} />\n  </div>\n)\n\nconst PersonForm = (props) => (\n  <form onSubmit={props.onSubmit}>\n    <div>\n      name: <input value={props.newName} onChange={props.nameHandler} />\n    </div>\n    <div>\n      number: <input value={props.newNumber} onChange={props.numberHandler} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst ContactList = ({ selectFrom, handleDeletion }) => (\n  <ul>\n    {selectFrom.map(person =>\n      <li key={person.id}>\n        {person.name} {person.number} <button id={person.id} onClick={handleDeletion}>delete</button>\n      </li>\n    )}\n  </ul>\n)\n\nconst Notification = ({ message, error }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={error ? \"error\" : \"notification\"} >\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [filter, setFilter] = useState('')\n  const [message, setMessage] = useState(null)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialContacts => {\n        setPersons(initialContacts)\n      })\n  }, [])\n\n  const addEntry = event => {\n    event.preventDefault()\n    const newEntry = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.some(person => person.name === newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const target = persons.find(p => p.name === newName)\n        setNewName('')\n        setNewNumber('')\n        personService\n          .update(target.id, newEntry)\n          .then(updated => {\n            setPersons(persons.map(person => person.name === target.name ? updated : person))\n          })\n          .catch(error => {\n            setMessage(`Information of ${target.name} has already been removed from the server`)\n            setPersons(persons.filter(p => p.id !== target.id))\n            setError(true)\n            setTimeout(() => {\n              setMessage(null)\n              setError(false)\n            }, 5000)\n            return\n          })\n      }\n      setMessage(`The number of ${newName} was updated`)\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n      return\n    }\n\n    personService\n      .create(newEntry)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n      })\n    setNewName('')\n    setNewNumber('')\n    setMessage(`Added ${newName}`)\n    setTimeout(() => {\n      setMessage(null)\n    }, 5000)\n  }\n\n  const deleteEntry = event => {\n    const id = parseInt(event.target.id, 10)\n    const person = persons.find(p => p.id === id)\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService.remove(person.id)\n      setPersons(persons.filter(p => p.id !== person.id))\n      setMessage(`Deleted ${person.name}`)\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    }\n  }\n\n  const entriesToShow = showAll\n    ? persons\n    : persons.filter(person =>\n      person.name.toLowerCase().includes(filter.toLowerCase()) || person.number.includes(filter)\n    )\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n    event.target.value.length === 0 ? setShowAll(true) : setShowAll(false)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} error={error} />\n      <Filter value={filter} handler={handleFilterChange} />\n      <h2>add a new entry</h2>\n      <PersonForm\n        onSubmit={addEntry}\n        newName={newName}\n        newNumber={newNumber}\n        nameHandler={(event) => setNewName(event.target.value)}\n        numberHandler={(event) => setNewNumber(event.target.value)}\n      />\n      <h2>Numbers</h2>\n      <ContactList selectFrom={entriesToShow} handleDeletion={deleteEntry} />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}